@page "/orders"
@using System.ComponentModel.DataAnnotations
@using sep3.Model
@using web.Services
@inject IOrderService OrderService

<PageTitle>Orders</PageTitle>
<h1>Orders:</h1>

<button type="button" class="btn btn-primary" @onclick="OnInitializedAsync">Refresh</button>


@if (orders == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>OrderID</th>
            <th>CreatedAt</th>
            <th>CustomerID</th>
            <th>Price</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var order in orders)
        {
            <tr>
                <td>@order.Id</td>
                <td>    
                    <button type="button" class="btn btn-danger" @onclick="() => RemoveOrder(order.Id)">Remove</button>
                    <button class="btn btn-warning">Update</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

<h2>Create New Order</h2>

<EditForm Model="newOrder" OnValidSubmit="CreateOrder" FormName="CreateOrderForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="CustomerID">Customer ID</label>
        <InputNumber @bind-Value="newOrder.CustomerId" class="form-control" id="CustomerID" placeholder="Enter Customer ID" />
    </div>

    <div class="form-group">
        <label for="Price">Price</label>
        <InputNumber @bind-Value="newOrder.Price" class="form-control" id="Price" placeholder="Enter Price" />
    </div>

    <button type="submit" class="btn btn-success">Create</button>
</EditForm>


@code
{
    
    //Load Orders
    private List<Order>? orders;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            orders = await OrderService.GetOrdersAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        Console.WriteLine("Orders loaded successfully.");
        StateHasChanged();
    }
    
    //Remove Orders
    private async Task RemoveOrder(int orderId)
    {
        Console.WriteLine($"Attempting to remove order with ID: {orderId}");
        try
        {
            await OrderService.RemoveOrderAsync(orderId);
            orders = await OrderService.GetOrdersAsync();
            Console.WriteLine("Order removed successfully.");
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error removing order: {e.Message}");
        }
    }

    
    //Create Orders
    private OrderModel newOrder = new OrderModel();
    
    public class OrderModel
    {
        [Required(ErrorMessage = "Customer ID is required.")]
        public int CustomerId { get; set; }

        [Required(ErrorMessage = "Price is required.")]
        [Range(0.01, double.MaxValue, ErrorMessage = "Price must be greater than zero.")]
        public double? Price { get; set; }
    }
    
    private async Task CreateOrder()
    {
        DateTimeOffset createdAt = DateTimeOffset.UtcNow;

        //await OrderService.AddOrderAsync(createdAt, newOrder.CustomerId, newOrder.Price);
        
        newOrder = new OrderModel();
        await OnInitializedAsync();
    }
    
    
}

