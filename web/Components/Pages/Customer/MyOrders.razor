    @page "/orders"
    @inject IOrderService OrderService
    @using web.Model.Order
    @using web.Services
    @rendermode InteractiveServer
    @inject IJSRuntime JSRuntime

    <PageTitle>Orders</PageTitle>

    <div class="container mt-5">
        <h1 class="orange-text">My Orders</h1>
        @if (orders == null)
        {
            <p>Loading orders...</p>
        }
        else if (!orders.Any())
        {
            <p>No orders found.</p>
        }
        else
        {
            @foreach (var order in orders)
            {
                <div class="card receipt-card p-4 mb-4">
                    <h2 class="orange-text">Order #@order.Id</h2>
                    <p>Date: <span class="fw-bold">Coming soon</span></p>
                    <p>Order No.: <span class="fw-bold">@order.Id</span></p>
                    <hr/>

                    @if (order.ShoppingCart?.CartItems != null && order.ShoppingCart.CartItems.Any())
                    {
                        foreach (var cartItem in order.ShoppingCart.CartItems)
                        {
                            <div class="mb-3">
                                <p>
                                    @(cartItem.ProductName ?? "Unknown Product")
                                    @(cartItem.Size != null ? $" ({cartItem.Size})" : "")
                                    @(cartItem.Quantity > 0 ? $" x{cartItem.Quantity}" : "")
                                    <span class="float-end">@($"{cartItem.Price * cartItem.Quantity}.-")</span>
                                </p>
                            </div>
                        }
                    }
                    else
                    {
                        <p>No items in this order.</p>
                    }

                    <hr/>
                    <h4 class="text-end">
                        @if (order.ShoppingCart?.CartItems != null && order.ShoppingCart.CartItems.Any())
                        {
                            var total = order.ShoppingCart.CartItems.Sum(ci => ci.Price * ci.Quantity);
                            @($"{total:F2}.-")
                        }
                    </h4>
                    <hr/>
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="orange-text mb-0">Status: @order.CurrentStatus.StatusName</h5>
                        @if (order.CurrentStatus.Id == 1)
                        {
                        <button class="btn btn-danger" @onclick="() => CancelOrder(order.Id)">
                            Cancel
                        </button>
                        }
                    </div>
                </div>
            }
        }
    </div>

    @code {
        private int customerId = 1; // Hardcoded ID
        private List<Order> orders { get; set; }

        private async Task LoadOrdersAsync()
        {
            if (OrderService == null)
            {
                Console.WriteLine("OrderService is not injected.");
                orders = new List<Order>(); // Prevent null reference
                return;
            }

            try
            {
                orders = await OrderService.GetOrdersAsync(customerId) ?? new List<Order>();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching orders: {ex.Message}");
                orders = new List<Order>(); // Prevent null reference
            }
        }
        
        protected override async Task OnInitializedAsync()
        {
            LoadOrdersAsync();
        }

        private async Task CancelOrder(int orderId)
        {
            try
            {
               await OrderService.UpdateOrderAsync(orderId, 5);
                await LoadOrdersAsync();

            }catch (Exception ex)
            {
                Console.WriteLine($"Error cancelling order: {ex.Message}");
            }
        }
    }
