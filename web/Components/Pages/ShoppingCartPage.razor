@page "/ShoppingCart"
@using web.Model
@using web.Services
@inject ICartItemService CartItemService
@inject IOrderService OrderService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="single-product-area section-padding-100 clearfix">
    <PageTitle>ShoppingCart</PageTitle>
    <h1>ShoppingCart:</h1>
    <!-- Purchase Popup -->
    <div aria-live="polite" aria-atomic="true" class="position-relative">
        <div class="toast-container position-fixed bottom-0 end-0 p-3">
            <div id="cartToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto">Cart Notification</strong>
                    <small class="text-muted">Just now</small>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body">
                    Item added to your cart!
                </div>
            </div>
        </div>
    </div>
    <div >
        @if (_shoppingCart != null && _shoppingCart.Any())
        {
            <table class="table">
                <thead>
                <tr>
                    <th>Product Name</th>
                    <th>Price</th>
                    <th>Size</th>
                    <th>Quantity</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var item in _shoppingCart)
                {
                    <tr>
                        <td>@item.Name</td>
                        <td>@item.Price</td>
                        <td>@item.Size</td>
                        <td>@item.Quantity</td>
                        <td>
                            <button class="btn btn-danger" @onclick="() => RemoveItemASync(item)">Remove</button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        }
        else
        {
            <p>Your shopping cart is empty.</p>
        }
    </div>
    <div>
        <div>
            <h3>Total Price:</h3>
            <h4>@totalPrice</h4>
        </div>
        <div>
            <button @onclick="BuyShoppingCartASync">Purchase Cart</button>
        </div>
    </div>

</div>

@code
{
    private List<CartItem> _shoppingCart = [];
    private double totalPrice = 0;



    protected override async Task OnParametersSetAsync()
    {
        _shoppingCart = await CartItemService.GetCartASync();
        await GetTotalPrice();
    }

    private async Task RemoveItemASync(CartItem item)
    {
        await CartItemService.RemoveFromCartASync(item);
        await GetTotalPrice();
    }

    private Task GetTotalPrice()
    {
        totalPrice = 0;
        foreach (var item in _shoppingCart)
        {
            totalPrice += (item.Price * item.Quantity);
        }

        return Task.CompletedTask;
    }

    private async void BuyShoppingCartASync()
    {
        try
        {
            var order = await OrderService.CreateOrderAsync(_shoppingCart);
            var orderIdTrimmed = order.OrderId.Trim('"');
            if (order.IsSuccess)
            {
                Console.WriteLine("Order created: " + order.IsSuccess + " Order ID:" + orderIdTrimmed);
                await CartItemService.ClearCartAsync();
                await GetTotalPrice();
                
                // Show toast
                await JSRuntime.InvokeVoidAsync("showCartToast", $"Order #{orderIdTrimmed} created successfully!");
            }
            else
            {
                Console.WriteLine("Order created:" + order.IsSuccess + " StatusCode:" + order.StatusCode);
                // Show toast
                await JSRuntime.InvokeVoidAsync("showCartToast", $"Error on: Order #{orderIdTrimmed} with error {order.StatusCode}!");
            }    
        }catch (Exception ex)
        {
            StateHasChanged();
            await JSRuntime.InvokeVoidAsync("showCartToast", $"Fejl! {ex.Message}");
        }
        StateHasChanged();
    }
}