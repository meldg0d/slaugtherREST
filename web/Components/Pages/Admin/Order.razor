@page "/testPanel/order"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using DTO.Order
@using web.Components.Layout.Admin
@using web.Services
@layout AdminNavMenu
@inject IOrderService OrderService

<PageTitle>Orders</PageTitle>

<div class="container">
    <h1>Orders:</h1>

    <!-- Back button-->
    <a href="/testPanel" class="btn btn-secondary mt-3">Back</a>
    <!-- Refresh button-->
    <button type="button" class="btn btn-primary" @onclick="RefreshOrders">Refresh</button>

    <div class="row mt-2">
        <div class="col-12">
            @if (orders == null)
            {
                <p>Loading orders...</p>
            }
            else if (!orders.Any())
            {
                <p>No orders found.</p>
            }
            else
            {
                <table class="table table-striped">
                    <thead>
                    <tr>
                        <th>Order ID</th>
                        <th>Customer ID</th>
                        <th>ProductID</th>
                        <th>Order Total</th>
                        <th>Actions</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var order in orders)
                    {
                        <tr>
                            <td>@order.Id</td>
                            <td>@order.CustomerId</td>
                            <!-- Remove and Update buttons -->
                            <td>@order.ProductId</td>
                            <td></td>
                            <td>
                                <button type="button" class="btn btn-danger" @onclick="() => RemoveOrder(order.Id)">Remove</button>
                                <button class="btn btn-warning">Update</button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            }
        </div>
    </div>

    <!-- Create new order form -->
    <h2>Create New Order</h2>

    <EditForm Model="newOrder" OnValidSubmit="CreateOrder">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="customerId">Customer ID</label>
            <InputNumber id="customerId" class="form-control" @bind-Value="newOrder.CustomerId" />
            <ValidationMessage For="@(() => newOrder.CustomerId)" />
        </div>

        <div class="form-group">
            <label for="orderStatus">Order Status</label>
            <InputNumber id="orderStatus" class="form-control" @bind-Value="newOrder.ProductId" />
            <ValidationMessage For="@(() => newOrder.ProductId)" />
        </div>
        

        <button type="submit" class="btn btn-success">Create Order</button>
    </EditForm>
    
    
    
</div>

@code {
private List<Model.Order> orders;

protected override async Task OnInitializedAsync()
{
await LoadOrdersAsync();
}

private async Task LoadOrdersAsync()
{
try
{
// Fetch orders from the service
orders = await OrderService.GetOrdersAsync();
}
catch (Exception ex)
{
// Log or handle the exception as needed
Console.Error.WriteLine($"Error loading orders: {ex.Message}");
orders = new List<Model.Order>(); // Initialize to an empty list to avoid null reference
}
}

// Refresh orders
private async Task RefreshOrders()
{
await LoadOrdersAsync();
}

// Remove order
private async Task RemoveOrder(int orderId)
{
try
{
await OrderService.RemoveOrderAsync(orderId);
await LoadOrdersAsync();
}
catch (Exception ex)
{
Console.Error.WriteLine($"Error removing order: {ex.Message}");
}
}



//Create new order
    private NewOrderModel newOrder = new NewOrderModel();
    public class NewOrderModel
    {
        [Required(ErrorMessage = "Customer ID is required.")]
        public int CustomerId { get; set; }

        [Required(ErrorMessage = "Order ID is required.")]
        public int ProductId { get; set; }

        // Add other necessary properties here
    }

    private async Task CreateOrder()
    {
        try
        {
            // Map NewOrderModel to OrderDTO
            var orderDto = new CreateOrderDTO
            {
                CustomerId = newOrder.CustomerId,
                ProductId = newOrder.ProductId,
            };

            await OrderService.CreateOrderAsync(orderDto);

            // Clear the form after successful submission
            newOrder = new NewOrderModel();

            // Refresh the orders list
            await LoadOrdersAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error creating order: {ex.Message}");
        }
    }


}
