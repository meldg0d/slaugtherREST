@page "/admin/update-variant"
@using web.Model
@using web.Services
@inject IProductService ProductService
@inject IVariantService VariantService
@rendermode InteractiveServer

<div class="container my-5">
    <h1 class="mb-4">Admin Panel - Update Variant</h1>

    <div class="mb-3">
        <input
            type="text"
            class="form-control"
            placeholder="Search products..."
            @bind="SearchTerm"
            @bind:event="oninput"/>
    </div>

    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
        <tr>
            <th scope="col">Name</th>
            <th scope="col">Price</th>
            <th scope="col">Description</th>
            <th scope="col">Image</th>
        </tr>
        </thead>
        <tbody>
        @if (_filteredProducts.Any())
        {
            @foreach (var product in _filteredProducts)
            {
                <tr @onclick="() => OnProductSelected(product)" style="cursor: pointer;">
                    <td>@product.Name</td>
                    <td>@product.Price.ToString("C")</td>
                    <td>@product.Description</td>
                    <td>
                        <img src="@product.ImagePath" alt="@product.Name" class="img-thumbnail" style="max-width: 75px;"/>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="4" class="text-center">No products found</td>
            </tr>
        }
        </tbody>
    </table>

    @if (_selectedProduct != null)
    {
        <h2 class="mt-5">Variants for @_selectedProduct.Name</h2>
        <table class="table table-striped table-bordered">
            <thead class="thead-dark">
            <tr>
                <th scope="col">Variant Id</th>
                <th scope="col">Variant Material</th>
                <th scope="col">Variant Size</th>
                <th scope="col">Variant Stock</th>
                <th scope="col">Archive Product</th>
                <th scope="col">Actions</th>
            </tr>
            </thead>
            <tbody>
            @if (_productVariants != null && _productVariants.Any())
            {
                @foreach (var variant in _productVariants)
                {
                    <tr>
                        <td>@variant.Id</td>
                        <td>
                            @if (_editableVariant == variant && _editableField == "Material")
                            {
                                <input type="text" class="form-control" @bind="variant.Material" @bind:event="oninput"/>
                            }
                            else
                            {
                                <span @ondblclick="@(() => StartEditing(variant, "Material"))">@variant.Material</span>
                            }
                        </td>
                        <td>
                            @if (_editableVariant == variant && _editableField == "Size")
                            {
                                <input type="text" class="form-control" @bind="variant.Size" @bind:event="oninput"/>
                            }
                            else
                            {
                                <span @ondblclick="@(() => StartEditing(variant, "Size"))">
                                    @variant.Size
                                </span>
                            }
                        </td>
                        <td>
                            @if (_editableVariant == variant && _editableField == "Stock")
                            {
                                <input type="number" class="form-control" @bind="variant.Stock" @bind:event="oninput"/>
                            }
                            else
                            {
                                <span @ondblclick="@(() => StartEditing(variant, "Stock"))">@variant.Stock</span>
                            }
                        </td>
                        <td>
                            <select class="form-select form-select-sm" @onchange="(e) => ChangeVariantStatus(variant.Id, ((ChangeEventArgs)e).Value.ToString())">
                                <option value="" disabled selected>Select status</option>
                                @foreach (var status in availableStatuses)
                                {
                                <option value="@status.Status">@status.Status</option>
                                }
                            </select>
                        </td>
                        <td>
                            @if (_editableVariant == variant)
                            {
                                <button class="btn btn-sm btn-success" @onclick="() => SaveChanges(variant)">Save</button>
                                <button class="btn btn-sm btn-secondary" @onclick="CancelEditing">Cancel</button>
                            }
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="5" class="text-center">No variants found</td>
                </tr>
            }
            </tbody>
        </table>
    }

</div>


@code {
    private List<Product> _products = [];
    private List<ProductVariant>? _productVariants = [];
    private List<Product> _filteredProducts = [];
    private Product _selectedProduct;
    private ProductVariant? _editableVariant;
    private string _editableField = "";
    private string _searchTerm = string.Empty;
    private List<ArchiveStatus> availableStatuses = [];
    private bool statusChanged;
    private string SearchTerm
    {
        get => _searchTerm;
        set
        {
            _searchTerm = value;
            FilterProducts();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _products = await ProductService.GetProductsAsync();
        _filteredProducts = _products;
        availableStatuses.Add(new ArchiveStatus
        {
            Id = 2,
            Status = "Active"
        });
        availableStatuses.Add(new ArchiveStatus
        {
            Id = 1,
            Status = "Archived"
        });
    }

    private void FilterProducts()
    {
        if (string.IsNullOrWhiteSpace(_searchTerm))
        {
            _filteredProducts = _products;
        }
        else
        {
            _filteredProducts = _products
                .Where(p => p.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                            p.Description.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private async Task OnProductSelected(Product product)
    {
        _selectedProduct = product;
        _productVariants = await ProductService.GetProductVariantsAsync(product.Id);
    }

    private void StartEditing(ProductVariant variant, string field)
    {
        _editableVariant = variant;
        _editableField = field;
    }

    private void CancelEditing()
    {
        _editableVariant = null;
        _editableField = "";
    }

    private async Task SaveChanges(ProductVariant variant)
    {
        _editableVariant = null;
        _editableField = "";


        await VariantService.UpdateProductVariantAsync(variant.Id, variant);


        _productVariants = await ProductService.GetProductVariantsAsync(_selectedProduct.Id);
    }


    private void ChangeVariantStatus(int variantId, string newStatus)
    {
        var statusId = GetStatusFromName(newStatus);

        var variant = _productVariants.FirstOrDefault(v => v.Id == variantId);
        if (variant != null && variant.ArchiveStatusId != statusId)
        {
            variant.ArchiveStatusId = statusId;
            statusChanged = true;  // Indicate that the status has changed
        }
        else
        {
            statusChanged = false; // Reset if the status is not changed
        }
    }

    private long GetStatusFromName(string statusName)
    {
        return availableStatuses.FirstOrDefault(s => s.Status == statusName)!.Id;
    }

}