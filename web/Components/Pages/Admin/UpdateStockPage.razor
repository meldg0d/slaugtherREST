@page "/admin/update-variant"
@using web.Model
@using web.Services
@inject IProductService ProductService
@inject IVariantService VariantService
@rendermode InteractiveServer

<div class="container my-5">
    <h1 class="mb-4">Admin Panel - Update Variant</h1>

    <div class="mb-3">
        <input 
            type="text" 
            class="form-control" 
            placeholder="Search products..." 
            @bind="SearchTerm" 
            @bind:event="oninput" />
    </div>

    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Price</th>
                <th scope="col">Description</th>
                <th scope="col">Image</th>
            </tr>
        </thead>
        <tbody>
            @if (filteredProducts.Any())
            {
                @foreach (var product in filteredProducts)
                {
                    <tr @onclick="() => OnProductSelected(product)" style="cursor: pointer;">
                        <td>@product.Name</td>
                        <td>@product.Price.ToString("C")</td>
                        <td>@product.Description</td>
                        <td>
                            <img src="@product.ImagePath" alt="@product.Name" class="img-thumbnail" style="max-width: 75px;" />
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="4" class="text-center">No products found</td>
                </tr>
            }
        </tbody>
    </table>

    @if (selectedProduct != null)
    {
        <h2 class="mt-5">Variants for @selectedProduct.Name</h2>
        <table class="table table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">Variant Name</th>
                    <th scope="col">Variant Material</th>
                    <th scope="col">Variant Size</th>
                    <th scope="col">Variant Stock</th>
                </tr>
            </thead>
            <tbody>
                @if (productVariants.Any())
                {
                    @foreach (var variant in productVariants)
                    {
                        <tr>
                            <td>@variant.Id</td>
                            <td>@variant.Material</td>
                            <td>@variant.Size</td>
                            <td>@variant.Stock</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="2" class="text-center">No variants found</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>


@code {
    private List<Product> products = new List<Product>();
    private List<ProductVariant>? productVariants = new List<ProductVariant>();
    private List<Product> filteredProducts = new List<Product>();
    private Product selectedProduct = null;

    private string searchTerm = string.Empty;
    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            searchTerm = value;
            FilterProducts();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetProductsAsync();
        filteredProducts = products; // Initialize filtered list
    }

    private void FilterProducts()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredProducts = products;
        }
        else
        {
            filteredProducts = products
                .Where(p => p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                            p.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }
    
    private async Task OnProductSelected(Product product)
    {
        selectedProduct = product;
        productVariants = await ProductService.GetProductVariantsAsync(product.Id);
    }
}
