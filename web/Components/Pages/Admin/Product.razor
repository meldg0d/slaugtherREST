@page "/testPanel/product"
@rendermode InteractiveServer


@using web.Components.Layout.Admin
@using web.Services
@layout AdminNavMenu
@inject IProductService ProductService
@inject IOrderService OrderService

<PageTitle>Orders</PageTitle>

<div class="container">
    <a href="/testPanel" class="btn btn-secondary mt-3">Back</a>
    <h1>Products:</h1>
    @if (products == null)
    {
        <p>Loading orders...</p>
    }
    else if (!products.Any())
    {
        <p>No orders found.</p>
    }
    else
    {
        <table class="table">
            <thead>
            <tr>
                <th>Product ID</th>
                <th>Product Name</th>
                <th>Product Price</th>
                <th>Product Description</th>
                <th>Buy</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Brand</td>
                    <td>@product.Price</td>
                    <td>@product.Description</td>
                    <td> 
                        <label for="customerId">CustomerID</label>
                        <InputNumber id="customerId" class="form-control" @bind-Value="newOrder.CustomerId" />

                        
                        <button class="btn btn-primary" @onclick="() => BuyProduct(product.Id, newOrder.CustomerId)">Buy</button></td>
                    <td>
                        <button class="btn btn-primary">Edit</button>
                        <button class="btn btn-danger" @onclick="() => RemoveProduct(product.Id)">Delete</button>
                    </td>
                </tr>
            }
            </tbody>

        </table>
    }


</div>

@code {
    private List<Model.Product> products;

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetProductsAsync();
    }

    private async Task RefreshProduct()
    {
        products = await ProductService.GetProductsAsync();
    }

    private async Task RemoveProduct(int id)
    {
        await ProductService.DeleteProductAsync(id);
        await RefreshProduct();
    }

    private async Task BuyProduct(int productId, int customerId)
    {
        await OrderService.CreateOrderAsync(productId, customerId);
        
        //will refresh stock later
        await RefreshProduct();

        Console.WriteLine("Product bought");
    }
    
    private Model.Order newOrder = new Model.Order();

}
